// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
	http2 "net/http"
	"reference-application/internal/application"
	"reference-application/internal/application/commands/createprogram"
	"reference-application/internal/infrastructure/repositories"
	"reference-application/internal/infrastructure/transports/http"
)

// Injectors from wire.go:

func NewApplication() Application {
	db := provideDB()
	programRepository := repositories.NewProgramRepository(db)
	handler := createprogram.Handler{
		Repository: programRepository,
	}
	endpoint := createprogram.NewEndpoint(handler)
	endpoints := application.Endpoints{
		CreateProgramEndpoint: endpoint,
	}
	httpHandler := http.NewHandler(endpoints)
	mainApplication := Application{
		HTTPHandler: httpHandler,
	}
	return mainApplication
}

// wire.go:

type Application struct {
	HTTPHandler http2.Handler
}

func (app Application) Run() error {
	return http2.ListenAndServe(":8080", app.HTTPHandler)
}

func provideDB() *gorm.DB {
	db, err := gorm.Open(sqlite.Open("test.db"), &gorm.Config{})
	if err != nil {
		panic("failed to connect database")
	}
	err = db.AutoMigrate(repositories.ProgramModel{})
	if err != nil {
		panic("failed to migrate database")
	}
	return db
}
