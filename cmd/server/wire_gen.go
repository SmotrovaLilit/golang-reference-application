// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"fmt"
	"gorm.io/gorm"
	"net"
	http2 "net/http"
	"reference-application/internal/application"
	"reference-application/internal/application/commands/createprogram"
	"reference-application/internal/application/commands/sendtoreviewprogramversion"
	"reference-application/internal/application/commands/updateprogramversion"
	"reference-application/internal/infrastructure/repositories"
	"reference-application/internal/infrastructure/transports/http"
)

// Injectors from wire.go:

func NewApplication(db *gorm.DB, addr HTTPAddr) Application {
	unitOfWork := repositories.NewUnitOfWork(db)
	handler := createprogram.Handler{
		UnitOfWork: unitOfWork,
	}
	endpoint := createprogram.NewEndpoint(handler)
	versionRepository := repositories.NewVersionRepository(db)
	updateprogramversionHandler := updateprogramversion.Handler{
		Repository: versionRepository,
	}
	updateprogramversionEndpoint := updateprogramversion.NewEndpoint(updateprogramversionHandler)
	sendtoreviewprogramversionHandler := sendtoreviewprogramversion.Handler{
		Repository: versionRepository,
	}
	sendtoreviewprogramversionEndpoint := sendtoreviewprogramversion.NewEndpoint(sendtoreviewprogramversionHandler)
	endpoints := application.Endpoints{
		CreateProgramEndpoint:              endpoint,
		UpdateProgramVersionEndpoint:       updateprogramversionEndpoint,
		SendToReviewProgramVersionEndpoint: sendtoreviewprogramversionEndpoint,
	}
	httpHandler := http.NewHandler(endpoints)
	mainApplication := Application{
		HTTPHandler: httpHandler,
		HTTPAddr:    addr,
	}
	return mainApplication
}

// wire.go:

type HTTPAddr string

type Application struct {
	HTTPHandler http2.Handler
	HTTPAddr    HTTPAddr
}

func (app *Application) Run() error {
	ln, err := net.Listen("tcp", string(app.HTTPAddr))
	if err != nil {
		return err
	}
	fmt.Println("HTTP server listening on", string(app.HTTPAddr))
	return app.Serve(ln)
}

func (app *Application) Serve(l net.Listener) error {
	return http2.Serve(l, app.HTTPHandler)
}
